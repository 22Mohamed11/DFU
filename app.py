# import io
# from flask import Flask, request, jsonify
# import numpy as np
# import tensorflow as tf
# from PIL import Image


# app = Flask(__name__)

# # function to load the deep learning model
# def load_model(model_path):
#     """
#     Load your deep learning model.

#     Parameters:
#         model_path (str): The path to the directory containing the saved model.

#     Returns:
#         model: The loaded deep learning model.
#     """
#     # Load the model
#     model = tf.keras.models.load_model(model_path)

#     return model

# model_path = 'G:\Flask\your_model_file.h5'
# loaded_model = load_model(model_path)

# ############################################################################################################################

# # Define a function to preprocess the image data
# def preprocess_image(image_data):
#     """
#     Preprocess the image data.

#     Args:
#         image_data: Image data as numpy array.

#     Returns:
#         preprocessed_image: Preprocessed image as tensor.
#     """
#     # Add your image preprocessing code here
#     image = image.open(io.BytesIO(image_data))
#     image = image.resize((150, 150))  # Resize to match model input shape
#     image = np.array(image) / 255.0  # Convert to numpy array
#     image = image.astype('float32') / 255.0  # Normalize to [0, 1]
#     image = np.expand_dims(image, axis = 0)  # Add batch dimension
#     return image

# # Example usage:
# image_data = ...
# preprocessed_image = preprocess_image(image_data)

# ##################################################################################################################################

# # Define a function to make predictions using the model
# def make_predictions(model, preprocessed_image):
#     """
#     Make predictions using the loaded model.

#     Args:
#         model: Loaded deep learning model.
#         preprocessed_image: Preprocessed image as tensor.

#     Returns:
#         predictions: Predictions generated by the model.
#     """
#     # Make predictions using the model
#    # predictions = model.predict(tf.expand_dims(preprocessed_image, axis = 0))
#     predictions = model.predict(model.predict(preprocessed_image))
#     return predictions

# # Assuming you have already loaded your deep learning model and preprocessed the image
# model = load_model(model_path)  # Your loaded deep learning model
# preprocessed_image = preprocess_image(image_data)  # Your preprocessed image

# # Make predictions
# predictions = make_predictions(model, preprocessed_image)

# ################################################################################################################################

# # Define endpoint to receive image and return prediction
# @app.route('/predict', methods=['POST'])
# def get_prediction():
#     # Receive image from Flutter mobile app
#     image_file = request.files['image']
#     if image_file:
#         image_data = image_file.read()
        
#         # Preprocess image
#         processed_image = preprocess_image(image_data)

#         # Make prediction
#         prediction = predictions(processed_image)
        
#         # Return prediction to Flutter mobile app
#         return jsonify({'prediction': prediction})
#     else:
#         return jsonify({'error': 'No image received'})

# if __name__ == '__main__':
#     app.run(debug=True)


from flask import Flask, request, jsonify
import io
import numpy as np
import tensorflow as tf
from PIL import Image


app = Flask(__name__)

# function to load the deep learning model
def load_model(model_path):
    """
    Load your deep learning model.

    Parameters:
        model_path (str): The path to the directory containing the saved model.

    Returns:
        model: The loaded deep learning model.
    """
    # Load the model
    model = tf.keras.models.load_model(model_path)

    return model

model_path = 'your_model_file.h5'
loaded_model = load_model(model_path)

############################################################################################################################

# Define a function to preprocess the image data
def preprocess_image(image_data):
    """
    Preprocess the image data.

    Args:
        image_data: Image data as numpy array.

    Returns:
        preprocessed_image: Preprocessed image as tensor.
    """
    # Add your image preprocessing code here
    image = Image.open(io.BytesIO(image_data))
    image = image.resize((150, 150))  # Resize to match model input shape
    image = np.array(image) / 255.0  # Convert to numpy array
    image = image.astype('float32') / 255.0  # Normalize to [0, 1]
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    return image

# Define a function to make predictions using the model
def make_predictions(model, preprocessed_image):
    """
    Make predictions using the loaded model.

    Args:
        model: Loaded deep learning model.
        preprocessed_image: Preprocessed image as tensor.

    Returns:
        predictions: Predictions generated by the model.
    """
    # Make predictions using the model
    predictions = model.predict(preprocessed_image)
    return predictions

# Define endpoint to receive image and return prediction
@app.route('/predict', methods = ['POST'])
def get_prediction():
    # Receive image from Flutter mobile app
    image_file = request.files['image']
    if image_file:
        image_data = image_file.read()
        
        # Preprocess image
        processed_image = preprocess_image(image_data)

        # Make prediction
        prediction = make_predictions(loaded_model, processed_image)
        
        # Return prediction to Flutter mobile app
        return jsonify({'prediction': str(prediction)})
    else:
        return jsonify({'error': 'No image received'})

if __name__ == '__main__':
    app.run(debug=True)
